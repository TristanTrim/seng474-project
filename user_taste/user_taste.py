#!/usr/bin/env python3
# -*- coding: utf-8 -*-


"""
Implementation of user taste module

NOTE: This module requires the user taste dataset to be available. This file can be generated by running entp_reader.py


"""
<<<<<<< Updated upstream

#import user_taste as UT
import numpy as np 
from numpy.random import randint

#import matplotlib.pyplot as plt
#from sklearn.cluster import KMeans
#from music_space.music_space import music_space
=======
import user_taste as UT
import numpy as np 
from numpy.random import randint
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
import music_space.music_space from music_space
>>>>>>> Stashed changes

# ^ commented out these modules, cvxpy doesn't like them

class user_taste():

    def __init__(self,path):
        self.taste_space = np.load(path + 'user_taste.npy')
        self.taste_dictionary = self.__init_taste_dictionary()
        self.score_matrix = None
        """
        score matrix format:
            n = number of users
            m = number of songs
            the matrix must be n x m:
            the value at row i, column j is the ith users rating of the jth song
        """
<<<<<<< Updated upstream
=======

>>>>>>> Stashed changes



    def __init_taste_dictionary(self):
        """constructs a dictionary of (sid,uid) : score pairs"""
        #group the sid and uid together into tuples
        keys = map(tuple, self.taste_space[:, :2])

        #cast the scores to int
        values = self.taste_space[:, 2].astype(int)

        taste_dictionary = dict(zip(keys, values))
        return taste_dictionary

    def get_song_score(self,uid,sid):
        """return the score given a user id (uid) and song id (sid)
        Dont use this function
        """

        listening_history = self.get_listening_history(uid)
        for song in list(listening_history[:, 1]):
            if song == sid:
                return self.taste_dictionary[(uid,sid)]

        return 0
    
    def get_rand_user(self):
        """returns the user id (uid) of a random user in the user taste dataframe"""
    
        i = randint(0,self.taste_space.shape[0]-1)
        return self.taste_space[i,0]
    
    def get_listening_history(self,uid):
        """return all the songs which a given user has listened to"""
        uid_records = self.taste_space[:,0] == uid
        return self.taste_space[uid_records]

    def get_all_users(self):
        return np.unique(self.taste_space[:,0])

    def get_all_songs(self):
        return np.unique(self.taste_space[:,1])
