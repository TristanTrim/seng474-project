#!/usr/bin/env python3
# -*- coding: utf-8 -*-


"""
Implementation of user taste module

NOTE: This module requires the user taste dataset to be available. This file can be generated by running entp_reader.py


"""

from numpy.random import randint
import numpy as np 
import matplotlib.pyplot as plt
class user_taste():

    def __init__(self,path):
        self.taste_space = np.load(path + 'user_taste.npy')
        self.taste_dictionary = self.__init_taste_dictionary()


    def __init_taste_dictionary(self):
        """constructs a dictionary of (sid,uid) : score pairs"""
        #group the sid and uid together into tuples
        keys = map(tuple, self.taste_space[:, :2])

        #cast the scores to int
        values = self.taste_space[:, 2].astype(int)

        taste_dictionary = dict(zip(keys, values))
        return taste_dictionary

    def get_song_score(self,uid,sid):
        """return the score given a user id (uid) and song id (sid)"""

        return self.taste_dictionary[(uid,sid)]

    def get_rand_user(self):
        """returns the user id (uid) of a random user in the user taste dataframe"""
    
        i = randint(0,self.taste_space.shape[0]-1)
        return self.taste_space[i,0]
    
    def get_listening_history(self,uid):
        uid_records = self.taste_space[:,0] == uid
        return self.taste_space[uid_records]

    def get_all_users(self):
        return set(self.taste_space[:,0])
        

def user_histories():
    U = user_taste()
    ratings_count = []
    num_users = 0
    for user in U.get_all_users():
        user = U.get_rand_user()
        history = U.get_listening_history(user)
        if history is not None and history.shape[0] >= 5 and history.shape[0] <= 15:
            ratings_count.append(history.shape[0])
            num_users+=1

    plt.hist(ratings_count,bins=10)
    plt.ylabel("number of songs rated")
    plt.xlim(5,15)
    plt.ylim(top = 600)
    plt.title(f"Songs rated per user (users = {num_users})")
    plt.show()

if __name__=="__main__":
    user_histories()
    
